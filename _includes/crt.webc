<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title @text="title"></title>
    <meta name="Fersi" content="Fersi">
    
    <style webc:keep>
    *, *::before, *::after {
        box-sizing: border-box;
    }
    
    body {
        background-color: #000;
        color: rgb(0, 247, 255);
        font-family: 'Courier New', monospace;
        margin: 0;
        padding: 0;
        height: 100vh;
        overflow: hidden;
    }
    
    .crt-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow-y: scroll;
        scroll-snap-type: y mandatory;
        scrollbar-width: none;
        -ms-overflow-style: none;
        background-color: #131313;
        border-radius: 20px;
        animation: turn-on 0.4s;
        box-shadow: inset 0 0 10vw 2vw rgba(15, 247, 255, 0.2);
    }
    
    .crt-screen::-webkit-scrollbar {
        display: none;
    }
    
    .crt-screen::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
            to bottom,
            rgba(18, 16, 16, 0) 50%,
            rgba(0, 0, 0, 0.25) 50%
        );
        background-size: 100% 4px;
        z-index: 2;
        pointer-events: none;
        animation: flicker 0.15s infinite;
    }
    
    .crt-screen::after {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(18, 16, 16, 0.1);
        opacity: 0;
        z-index: 2;
        pointer-events: none;
        animation: flicker 0.15s infinite;
    }
    
    @keyframes turn-on {
        0% {
            transform: scale(1, 0.8) translate3d(0, 0, 0);
            filter: brightness(30);
            opacity: 1;
        }
        100% {
            transform: scale(1, 1) translate3d(0, 0, 0);
            filter: brightness(1);
            opacity: 1;
        }
    }
    
    @keyframes flicker {
        0% { opacity: 0.27861; }
        5% { opacity: 0.34769; }
        10% { opacity: 0.23604; }
        15% { opacity: 0.90626; }
        20% { opacity: 0.18128; }
        25% { opacity: 0.83891; }
        30% { opacity: 0.65583; }
        35% { opacity: 0.67807; }
        40% { opacity: 0.26559; }
        45% { opacity: 0.84693; }
        50% { opacity: 0.96019; }
        55% { opacity: 0.08594; }
        60% { opacity: 0.20313; }
        65% { opacity: 0.71988; }
        70% { opacity: 0.53455; }
        75% { opacity: 0.37288; }
        80% { opacity: 0.71428; }
        85% { opacity: 0.70419; }
        90% { opacity: 0.7003; }
        95% { opacity: 0.36108; }
        100% { opacity: 0.24387; }
    }
    </style>
</head>
<body>
    <div class="crt-screen" @raw="content"></div>

    <script>
        class CRTScreen extends HTMLElement {
            connectedCallback() {
                this.addEventListener('wheel', this.handleWheel, { passive: false });
                this.addEventListener('touchstart', this.handleTouchStart, { passive: true });
                this.addEventListener('touchmove', this.handleTouchMove, { passive: false });
            }

            handleWheel(e) {
                e.preventDefault();
                const delta = e.deltaY;
                const panelHeight = this.clientHeight;
                const currentScroll = this.scrollTop;
                const targetScroll = Math.round((currentScroll + delta) / panelHeight) * panelHeight;
                this.scrollTo({
                    top: targetScroll,
                    behavior: 'smooth'
                });
            }

            handleTouchStart(e) {
                this.touchStartY = e.touches[0].clientY;
            }

            handleTouchMove(e) {
                if (!this.touchStartY) return;
                
                const touchY = e.touches[0].clientY;
                const diff = this.touchStartY - touchY;
                
                if (Math.abs(diff) > 5) {
                    e.preventDefault();
                    const panelHeight = this.clientHeight;
                    const currentScroll = this.scrollTop;
                    const targetScroll = Math.round((currentScroll + diff) / panelHeight) * panelHeight;
                    this.scrollTo({
                        top: targetScroll,
                        behavior: 'smooth'
                    });
                    
                    this.touchStartY = null;
                }
            }
        }

        customElements.define('crt-screen', CRTScreen);
    </script>
</body>
</html>